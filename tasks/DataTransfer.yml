version: '3'

vars:
  DEFAULT_ARCHIVE_DEST:
    sh: echo "/r/${USER:0:1}/$USER/lab_data"
  MPIMG2MPIIB: '{{.GROUP_TOOLS}}/mpimg2mpiib'
  RAW_SEQUENCING_DIR: '{{.GROUP_HOME}}/lab_data/raw_sequencing_data'
  RCLONE_MODULE: rclone/1.67.0
  RCLONE_CONFIG_NAME: nextcloud

includes:
  compress:
    taskfile: ./Compression.yml
    internal: true
  envmodule:
    taskfile: ./EnvironmentModules.yml
    internal: true

tasks:
  default:

  # Misc

  mpiib-to-mpcdf:
    vars:
      DATA_DIR: '{{.DATA_DIR | default .RAW_SEQUENCING_DIR}}'
    cmds:
      - task: download-from-mpiib
        vars:
          RUN_ID: '{{.RUN_ID}}'
          DATA: '{{.DATA}}'
          REPORT: '{{.REPORT}}'
          DATA_DIR: '{{.DATA_DIR}}'
      - task: compress-mpiib-data
        vars:
          RUN_ID: '{{.RUN_ID}}'
          DATA_DIR: '{{.DATA_DIR}}'
      - task: copy-mpiib-archive-to-r
        vars:
          ARCHIVE: '{{.DATA_DIR}}/{{.RUN_ID}}.tar.lz4'
      - task: link-mpiib-archive
        vars:
          RUN_ID: '{{.RUN_ID}}'
    requires:
      vars: [RUN_ID, DATA, REPORT]

  download-from-mpiib:
    internal: true
    dir: '{{.MPIMG2MPIIB}}'
    prompt: Download data for {{.RUN_ID}} to {{.DATA_DIR}}?
    cmds:
      - make RUN_ID="{{.RUN_ID}}" DATA="{{.DATA}}" REPORT="{{.REPORT}}" DATA_DIR="{{.DATA_DIR}}"
    requires:
      vars: [RUN_ID, DATA, DATA_DIR, MPIMG2MPIIB, REPORT]
    generates:
      - '{{.DATA_DIR}}/{{.RUN_ID}}'
      - '{{.DATA_DIR}}/{{.RUN_ID}}/data'
      - '{{.DATA_DIR}}/{{.RUN_ID}}/{{.RUN_ID}}.log'
      - '{{.DATA_DIR}}/{{.RUN_ID}}/$(basename {{.DATA}})'
      - '{{.DATA_DIR}}/{{.RUN_ID}}/$(basename {{.REPORT}})'
    status:
      - test -f {{.DATA_DIR}}/{{.RUN_ID}}/{{.RUN_ID}}.log

  compress-mpiib-data:
    internal: true
    cmds:
      - task: compress:compress-dir-lz4
        vars:
          DIRECTORY: '{{.RUN_ID}}'
          PARENT: '{{.DATA_DIR}}'
    requires:
      vars: [RUN_ID, DATA_DIR]
    generates:
      - '{{.DATA_DIR}}/{{.RUN_ID}}.tar.lz4'
    status:
      - test -f {{.DATA_DIR}}/{{.RUN_ID}}.tar.lz4 || test -f {{.DEFAULT_ARCHIVE_DEST}}/{{.RUN_ID}}.tar.lz4

  copy-mpiib-archive-to-r:
    internal: true
    dir: '{{.DEFAULT_ARCHIVE_DEST}}'
    cmds:
      - mv {{.ARCHIVE}} .
    requires:
      vars: [ARCHIVE, DEFAULT_ARCHIVE_DEST]
    generates:
      - ./$(basename {{.ARCHIVE}})
    status:
      - test -f ./$(basename {{.ARCHIVE}})

  link-mpiib-archive:
    internal: true
    vars:
      PTMP_ARCHIVE: '{{.RAW_SEQUENCING_DIR}}/archive'
    dir: '{{.PTMP_ARCHIVE}}'
    cmds:
      - ln -s "{{.DEFAULT_ARCHIVE_DEST}}/{{.RUN_ID}}.tar.lz4" {{.RUN_ID}}
    requires:
      vars: [DEFAULT_ARCHIVE_DEST, RAW_SEQUENCING_DIR, RUN_ID]
    generates:
      - ./{{.RUN_ID}}
    status:
      - test -f ./{{.RUN_ID}}

  ptmp-to-r:
    vars:
      DEST: '/r/${USER:0:1}/$USER/{{.DIR}}'
      SRC: '/ptmp/$USER/{{.DIR}}'
    cmds:
      - task: rsync-dir
    requires:
      vars: [DIR]

  r-to-ptmp:
    vars:
      DEST: '/ptmp/$USER/{{.DIR}}'
      SRC: '/r/${USER:0:1}/$USER/{{.DIR}}'
    cmds:
      - task: rsync-dir
    requires:
      vars: [DIR]

  rsync-dir:
    - mkdir -p {{.DEST}}
    - rsync --ignore-existing -av --progress {{.SRC}}/ {{.DEST}}/

  # Syncing $HOME

  sync-home:
    desc: Synchronize $HOME <-> Nextcloud, Git.
    summary: |
      Synchronize $HOME <-> Nextcloud, Git.

      Use Nextcloud and Git to synchronize $HOME across machines (e.g., local, 
      Raven, Viper, Logan, ...). Sync untracked files using rclone + Nextcloud; 
      sync tracked files using Git.
    vars:
      EXTRA: '{{.EXTRA | default "--dry-run"}}'
      NEXTCLOUD_SYNC: '{{.RCLONE_CONFIG_NAME}}:dev_sync'
      DEV_PREFIX: '~/dev'
      DEV_SUBDIRS: [
        'config',
        'notes',
        'scripts',
        'snippets',
        'workspaces'
      ]
    cmds:
      - task: make-nextcloud-home-sync-directory
        vars:
          EXTRA: '{{.EXTRA}}'
          NEXTCLOUD_SYNC: '{{.NEXTCLOUD_SYNC}}'
      - for: { var: DEV_SUBDIRS }
        task: sync-home-dev-nextcloud
        vars:
          EXTRA: '{{.EXTRA}}'
          NEXTCLOUD_SYNC: '{{.NEXTCLOUD_SYNC}}/{{.ITEM}}'
          SOURCEPATH:
            sh: echo "{{.DEV_PREFIX}}/{{.ITEM}}"
      - task: sync-home-dev-git
      - task: sync-home-dotfiles

  # NOTE: If dest:path doesn't exist, it is created and the source:path contents go there.
  make-nextcloud-home-sync-directory:
    internal: true
    cmds:
      - task: envmodule:run-inside
        vars:
          CMDS: rclone mkdir "{{.NEXTCLOUD_SYNC}}" {{.EXTRA}}
          MODULE: '{{.RCLONE_MODULE}}'

  sync-home-dev-nextcloud:
    internal: true
    cmds:
      - task: envmodule:run-inside
        vars:
          CMDS: rclone sync "{{.SOURCEPATH}}" "{{.NEXTCLOUD_SYNC}}" {{.EXTRA}}
          MODULE: '{{.RCLONE_MODULE}}'

  sync-home-dev-git:
    internal: true

  sync-home-dotfiles:
    internal: true

  # Nextcloud

  copy-*-*-nextcloud:
    desc: Local/Remote <-> Nextcloud
    summary: |
      Local/Remote <-> Nextcloud

      Usage

        copy-[file/contents/directory]-[to/from]-nextcloud

    vars:
      TYPE: '{{index .MATCH 0}}'
      DIRECTION: '{{index .MATCH 1}}'
      EXTRA: '{{.EXTRA | default "--progress"}}'
    cmds:
      - task: nextcloud-prepare-{{.TYPE}}-{{.DIRECTION}}
        vars:
          DESTPATH: '{{.DESTPATH}}'
          EXTRA: '{{.EXTRA}}'
      - task: nextcloud-copy-{{.TYPE}}-{{.DIRECTION}}
        vars:
          DESTPATH: '{{.DESTPATH}}'
          SOURCEPATH: '{{.SOURCEPATH}}'
          EXTRA: '{{.EXTRA}}'
    requires:
      vars: [DESTPATH, SOURCEPATH]

  nextcloud-prepare-file-to:
    internal: true
  
  nextcloud-prepare-file-from:
    internal: true

  nextcloud-prepare-contents-to:
    internal: true

  nextcloud-prepare-contents-from:
    internal: true

  nextcloud-prepare-directory-to:
    internal: true
    cmds:
      - task: envmodule:run-inside
        vars:
          CMDS: rclone mkdir "{{.RCLONE_CONFIG_NAME}}:{{.DESTPATH}}" {{.EXTRA}}
          MODULE: '{{.RCLONE_MODULE}}'
    requires:
      vars: [DESTPATH, EXTRA, RCLONE_CONFIG_NAME, RCLONE_MODULE]

  nextcloud-prepare-directory-from:
    internal: true
    cmds:
      - mkdir -p "{{.DESTPATH}}"

  nextcloud-copy-file-to:
    internal: true
    vars:
      # NOTE: Keep name the same. I don't think this is required for newer versions of rclone.
      FN:
        sh: basename {{.SOURCEPATH}}
    cmds:
      - task: rclone-copyto
        vars:
          SRC: '{{.SOURCEPATH}}'
          DST: '{{.RCLONE_CONFIG_NAME}}:{{.DESTPATH}}/{{.FN}}'
          EXTRA: '{{.EXTRA}}'
  
  nextcloud-copy-file-from:
    internal: true
    vars:
      # NOTE: Keep name the same. I don't think this is required for newer versions of rclone.
      FN:
        sh: basename {{.SOURCEPATH}}
    cmds:
      - task: rclone-copyto
        vars:
          SRC: '{{.RCLONE_CONFIG_NAME}}:{{.SOURCEPATH}}'
          DST: '{{.DESTPATH}}/{{.FN}}'
          EXTRA: '{{.EXTRA}}'

  nextcloud-copy-contents-to:
    internal: true
    cmds:
      - task: rclone-copy
        vars:
          SRC: '{{.SOURCEPATH}}'
          DST: '{{.RCLONE_CONFIG_NAME}}:{{.DESTPATH}}'
          EXTRA: '{{.EXTRA}}'

  nextcloud-copy-contents-from:
    internal: true
    cmds:
      - task: rclone-copy
        vars:
          SRC: '{{.RCLONE_CONFIG_NAME}}:{{.SOURCEPATH}}'
          DST: '{{.DESTPATH}}'
          EXTRA: '{{.EXTRA}}'

  nextcloud-copy-directory-to:
    internal: true
    cmds:
      - task: rclone-copy
        vars:
          SRC: '{{.SOURCEPATH}}'
          DST: '{{.RCLONE_CONFIG_NAME}}:{{.DESTPATH}}'
          EXTRA: '{{.EXTRA}}'

  nextcloud-copy-directory-from:
    internal: true
    cmds:
      - task: rclone-copy
        vars:
          SRC: '{{.RCLONE_CONFIG_NAME}}:{{.SOURCEPATH}}'
          DST: '{{.DESTPATH}}'
          EXTRA: '{{.EXTRA}}'

  rclone:
    cmds:
      - task: envmodule:run-inside
        vars:
          CMDS: rclone {{.RCLONE_CMD}} "{{.SRC}}" "{{.DST}}" {{.EXTRA}}
          MODULE: '{{.RCLONE_MODULE}}'
    requires:
      vars: [RCLONE_CMD, RCLONE_MODULE, SRC, DST, EXTRA]

  rclone-copyto:
    cmds:
      - task: rclone
        vars:
          RCLONE_CMD: copyto
          SRC: '{{.SRC}}'
          DST: '{{.DST}}'
          EXTRA: '{{.EXTRA}}'
    requires:
      vars: [SRC, DST, EXTRA]

  rclone-copy:
    cmds:
      - task: rclone
        vars:
          RCLONE_CMD: copyto
          SRC: '{{.SRC}}'
          DST: '{{.DST}}'
          EXTRA: '{{.EXTRA}}'
    requires:
      vars: [SRC, DST, EXTRA]