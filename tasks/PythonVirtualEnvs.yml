version: '3'

vars:
  GROUP_VENVS: '{{.GROUP_HOME}}/envs/venv'
  PYTHON_MODULE: python-waterboa/2024.06
  DEFAULT_UV_MODULE: uv

includes:
  envmodule:
    taskfile: ./EnvironmentModules.yml
    internal: true

tasks:
  create:
    desc: Create virtual environment with uv
    summary: |
      Create virtual environment with uv

      Usage
      -----
      $ task venv:create PREFIX=/path/to/env INSTALL="-r requirements.txt"
    vars:
      EXTRA_MODULES: '{{.EXTRA_MODULES | default ""}}'
      # TODO: More sensible default (maybe "" for system)
      PYTHON: '{{.PYTHON | default "$GROUP_HOME/opt/python/python/bin/python3.12"}}'
      UV_MODULE: '{{.UV_MODULE | default .DEFAULT_UV_MODULE}}'
    prompt: Create environment {{.PREFIX}}?
    cmds:
      - mkdir -p {{.PREFIX}}
      - task: envmodule:run-inside
        vars:
          CMDS: | 
            cd {{.PREFIX}} && 
            uv venv --python={{.PYTHON}} && 
            source .venv/bin/activate && 
            uv pip install {{.INSTALL}} && 
            deactivate
          MODULE: '{{.UV_MODULE}} {{.EXTRA_MODULES}}'
    requires:
      vars: [PREFIX, INSTALL]
    status:
      - test -f {{.PREFIX}}/.venv/bin/activate

  # deprecate?
  create-venv:
  # TODO: Graceful exits when errors
  # TODO: Use `uv init` instead with a config
    vars:
      PYTHON: '{{.PYTHON | default "$GROUP_HOME/opt/python/python/bin/python3.12"}}'
    dir: '{{.GROUP_VENVS}}/{{.NAME}}'
    prompt: Create environment {{.GROUP_VENVS}}/{{.NAME}}?
    cmds:
      - task: envmodule:run-in-module
        vars:
          CMDS: 'cd {{.GROUP_VENVS}}/{{.NAME}} && uv venv --python={{.PYTHON}} && source .venv/bin/activate && uv pip install {{.PIP_INSTALL}} && deactivate'
          MODULE: '{{.DEFAULT_UV_MODULE}}'
    requires:
      vars: [NAME, PIP_INSTALL]
    status:
      - test -f {{.GROUP_VENVS}}/{{.NAME}}/.venv/bin/activate

  create-venv-modulefile:
    vars:
      DEFAULT_VERSION: 0.0.1-alpha
      VERSION: '{{.DEFAULT_VERSION}}'
    dir: $GROUP_HOME/Modules/modulefiles/{{.NAME}}
    cmds:
      - task: envmodule:run-in-module
        vars:
          CMDS: 'python {{.ROOT_DIR}}/tasks/scripts/write_modulefile.py --NAME {{.NAME}} --VERSION {{.VERSION}} --template venv'
          MODULE: '{{.PYTHON_MODULE}}'
    status:
      - test -f $GROUP_HOME/Modules/modulefiles/{{.NAME}}/{{.VERSION}}
    requires:
      vars: [NAME]
  
  run-inside:
    dir: '{{.PREFIX}}'
    cmds:
      - bash -c 'source .venv/bin/activate; {{.CMDS}}; deactivate'
    required:
      vars: [CMDS, PREFIX]